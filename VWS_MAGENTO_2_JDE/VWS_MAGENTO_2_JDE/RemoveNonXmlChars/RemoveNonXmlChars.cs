using System;
using iBOLT.Framework;
using System.IO;

namespace RemoveNonXmlChars
{
    public class RemoveNonXmlChars : IBFlowComponent
    {

        public override void Definition(IBComponentDefinition Def)
        {
            try
            {
                Def.Name = "RemoveNonXmlChars";
                Def.Description = "This .NET component was generated by the .NET Component.";
                Def.Icon = "DotNetComponent.gif";
                Def.Group = "";
                Def.Sync = SyncEnum.Both;
                Def.Trans = LogicEnum.No;
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        public override void Config(IBComponentConfig Config)
        {
            try
            {
                // Place your code here
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        public override void Invoke(IBFlowContext Context)
        {

            try
            {

                String stVarName = Context.UserString;
                byte[] bInput = Context.FlowVars.GetBLOB(stVarName);
                int iBlobSize = bInput.Length;
                byte[] bOutput = new byte[iBlobSize];

                int j = 0;
                for (int i = 0; i < iBlobSize; i++)
                {
                    if (bInput[i] != 0)
                        bOutput[j++] = bInput[i];
                }
                Context.FlowVars.SetBLOB(stVarName, bOutput);
                Context.UserCode = bOutput.Length;

            }
            catch (Exception e)
            {
                throw e;
            }
        }

        public override void Commit(IBFlowContext Context)
        {
            try
            {
                // Place your code here
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        public override void Rollback(IBFlowContext Context)
        {
            try
            {
                // Place your code here
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        public override void Emulate(IBFlowContext Context)
        {
            try
            {
                // Place your code here
                this.Invoke(Context);
            }
            catch (Exception e)
            {
                throw e;
            }
        }
    }
}